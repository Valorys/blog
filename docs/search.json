[
  {
    "objectID": "posts/post-with-code/Exercice 2.html",
    "href": "posts/post-with-code/Exercice 2.html",
    "title": "Exercice 2",
    "section": "",
    "text": "library(rvest)\nlibrary(purrr)\nlibrary(dplyr)\nlibrary(tidyverse)\nlibrary(stringr)\n\n\n\n\nlist_tables &lt;-\n  session(\"https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques\") |&gt;\n  html_elements(\".wikitable\") |&gt;\n  html_table()\n\nCette commande créer une liste, list_tables qui contient 6 tables.\n\n\n\n\n\n\n# Créez un objet contenant le premier élément de list_tables\ndata_medaillles_sport_ete &lt;- list_tables[[1]]\n\n# Supprimez la première colonne et la première ligne\ndata_medaillles_sport_ete &lt;- data_medaillles_sport_ete[-1,-1]\n\n# Renommez les colonnes\ncolnames(data_medaillles_sport_ete) &lt;- c(\"Discipline\", \"Annees\", \"Editions\",\n                                          \"Epreuves_2020\", \"Or\", \"Argent\", \n                                         \"Bronze\", \"Total\", \"Athletes_medailles\",\n                                          \"Athletes_or\")\n\n# Convertir en colonnes d'entiers\ndata_medaillles_sport_ete[c('Editions', 'Epreuves_2020', 'Or', 'Argent', 'Bronze', 'Total')] &lt;- lapply(data_medaillles_sport_ete[c('Editions', 'Epreuves_2020', 'Or', 'Argent', 'Bronze', 'Total')], as.integer)\n\n\n\n\n\n\n\n\ndata_medaillles_sport_ete |&gt; \n  arrange(desc(Total)) |&gt; \n  head(3)\n\n# A tibble: 3 × 10\n  Discipline             Annees Editions Epreuves_2020    Or Argent Bronze Total\n  &lt;chr&gt;                  &lt;chr&gt;     &lt;int&gt;         &lt;int&gt; &lt;int&gt;  &lt;int&gt;  &lt;int&gt; &lt;int&gt;\n1 Athlétisme             Depui…       29            48  1028   1030   1027  3085\n2 Natation(hommes, femm… Depui…       29            37   607    604    603  1814\n3 Lutte                  1896,…       28            18   430    429    499  1358\n# ℹ 2 more variables: Athletes_medailles &lt;chr&gt;, Athletes_or &lt;chr&gt;\n\n\nLes trois disciplines avec le plus de médailles distribuées sont l’athlétisme, la nation et la lutte.\n\n\n\n\n\n\n\ndata_medaillles_sport_ete |&gt; \n  arrange(Epreuves_2020)\n\n# A tibble: 30 × 10\n   Discipline            Annees Editions Epreuves_2020    Or Argent Bronze Total\n   &lt;chr&gt;                 &lt;chr&gt;     &lt;int&gt;         &lt;int&gt; &lt;int&gt;  &lt;int&gt;  &lt;int&gt; &lt;int&gt;\n 1 Football              1900–…       27             2    34     34     35   103\n 2 Golf                  1900–…        4             2     8      8      9    19\n 3 Handball              1936,…       14             2    26     26     26    78\n 4 Hockey sur gazon      1908,…       24             2    35     35     36   106\n 5 Natation synchronisée Depui…       10             2    20     18     19    57\n 6 Pentathlon moderne    Depui…       25             2    42     42     42   126\n 7 Volley-ball           Depui…       15             2    30     30     30    90\n 8 Water polo            1900,…       26             2    28     28     29    85\n 9 Triathlon             Depui…        6             3    13     13     13    39\n10 Basket-ball           Depui…       20             4    32     32     32    96\n# ℹ 20 more rows\n# ℹ 2 more variables: Athletes_medailles &lt;chr&gt;, Athletes_or &lt;chr&gt;\n\n\nLes sports avec le moins d’épreuves en 2020 et qui avaient que 2 épreuves sont le Football, le Golf, le Handball, le Hockey sur gazon, la Natation synchronisée, le Pentathlon moderne, le Volley-ball et le Water polo.\n\n\n\n\n\n\n\nextract_numbers &lt;- function(str) {\n  as.integer(str_extract_all(str, \"\\\\d+\")[[1]])\n}\n\n\n# Fonction de calcul du nombre de JO d'été\ncalcul_nb_editions &lt;- function(date) {\n  r &lt;- strsplit(as.character(date), \",\")[[1]]\n  summer_olympics_years &lt;- integer(0)\n\n  for (part in r) {\n    if (grepl(\"depuis\", part)) {\n      debut &lt;- extract_numbers(part)\n      summer_olympics_years &lt;- c(summer_olympics_years, seq(debut, 2020, by = 4))\n    } else if (grepl(\"-\", part)) {\n      date_debut &lt;- as.integer(strsplit(part, \"-\")[[1]])\n      summer_olympics_years &lt;- c(summer_olympics_years, seq(date_debut[1], date_debut[2], by = 4))\n    } else if (is.numeric(part)) {\n      summer_olympics_years &lt;- c(summer_olympics_years, part)\n    } else {\n      debut &lt;- extract_numbers(part)\n      summer_olympics_years &lt;- c(summer_olympics_years, debut)\n    }\n  }\n\n  # Exclure les années sans JO\n  summer_olympics_years &lt;- setdiff(summer_olympics_years, c(1916, 1940, 1944))\n  nb_editions &lt;- length(unique(summer_olympics_years))\n  return(nb_editions)\n}\n\n# Exemples d'utilisation de la fonction\ncalcul_nb_editions(2000)\n\n[1] 1\n\ncalcul_nb_editions(\"2000\")\n\n[1] 1\n\ncalcul_nb_editions(\"2000-2012\") \n\n[1] 4\n\ncalcul_nb_editions(\"depuis 2000\")\n\n[1] 6\n\n\n\ncalcul_nb_editions(\"1896, 1904, depuis 1920\")\n\n[1] 26\n\n\nL’appel calcul_nb_editions(“1896, 1904, depuis 1920”) rend bien 26.\n\ncalcul_nb_editions(2000)\n\n[1] 1\n\n\nL’appel calcul_nb_editions(2000) rend 1.\n\ncalcul_nb_editions(\"1904–1924, depuis 1948\")\n\n[1] 21\n\n\nL’appel calcul_nb_editions(“1904–1924, depuis 1948”) rend 21.\n\n\n\n\n\n\n\ncalcul_medailles_individuelles &lt;- function(data_medaillles_sport_ete){\n  medailles &lt;- \"\\\\(\\\\d+-\\\\d+-\\\\d+\\\\)\"\n  data_medaillles_sport_ete$Athletes_medailles &lt;- regmatches(data_medaillles_sport_ete$Athletes_medailles, gregexpr(medailles, data_medaillles_sport_ete$Athletes_medailles))\n  data_medaillles_sport_ete$Athletes_medailles &lt;- sapply(data_medaillles_sport_ete$Athletes_medailles, function(x) ifelse(length(x) &gt; 0, x[1], NA))\n  medaille_max &lt;- max(sapply(strsplit(gsub(\"\\\\(|\\\\)\", \"\", data_medaillles_sport_ete$Athletes_medailles), \"-\"), function(x) sum(as.numeric(x))))\n  return(medaille_max)\n}\n\ncalcul_medailles_individuelles(data_medaillles_sport_ete)\n\n[1] 28\n\n\nLe nombre de médaille maximal obtenu par un athlète lors d’olympiades est de 28.\n\n\n\n\n\nextraire_nationalite_athlete &lt;- function(chaine){\n  nationalites_match &lt;- gregexpr(\"\\\\(([A-Z]+)\\\\)\", chaine)\n  nationalites &lt;- regmatches(chaine, nationalites_match)[[1]]\n  nationalites &lt;- setNames(rep(1, length(nationalites)), nationalites)\n  return(nationalites)\n}\n\nextraire_nationalite_athlete(\"Paavo Nurmi (FIN) (9-3-0) Carl Lewis (USA) (9-1-0)\")\n\n(FIN) (USA) \n    1     1"
  },
  {
    "objectID": "posts/post-with-code/Exercice 2.html#question-1",
    "href": "posts/post-with-code/Exercice 2.html#question-1",
    "title": "Exercice 2",
    "section": "",
    "text": "list_tables &lt;-\n  session(\"https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques\") |&gt;\n  html_elements(\".wikitable\") |&gt;\n  html_table()\n\nCette commande créer une liste, list_tables qui contient 6 tables."
  },
  {
    "objectID": "posts/post-with-code/Exercice 2.html#question-2",
    "href": "posts/post-with-code/Exercice 2.html#question-2",
    "title": "Exercice 2",
    "section": "",
    "text": "# Créez un objet contenant le premier élément de list_tables\ndata_medaillles_sport_ete &lt;- list_tables[[1]]\n\n# Supprimez la première colonne et la première ligne\ndata_medaillles_sport_ete &lt;- data_medaillles_sport_ete[-1,-1]\n\n# Renommez les colonnes\ncolnames(data_medaillles_sport_ete) &lt;- c(\"Discipline\", \"Annees\", \"Editions\",\n                                          \"Epreuves_2020\", \"Or\", \"Argent\", \n                                         \"Bronze\", \"Total\", \"Athletes_medailles\",\n                                          \"Athletes_or\")\n\n# Convertir en colonnes d'entiers\ndata_medaillles_sport_ete[c('Editions', 'Epreuves_2020', 'Or', 'Argent', 'Bronze', 'Total')] &lt;- lapply(data_medaillles_sport_ete[c('Editions', 'Epreuves_2020', 'Or', 'Argent', 'Bronze', 'Total')], as.integer)"
  },
  {
    "objectID": "posts/post-with-code/Exercice 2.html#question-3",
    "href": "posts/post-with-code/Exercice 2.html#question-3",
    "title": "Exercice 2",
    "section": "",
    "text": "data_medaillles_sport_ete |&gt; \n  arrange(desc(Total)) |&gt; \n  head(3)\n\n# A tibble: 3 × 10\n  Discipline             Annees Editions Epreuves_2020    Or Argent Bronze Total\n  &lt;chr&gt;                  &lt;chr&gt;     &lt;int&gt;         &lt;int&gt; &lt;int&gt;  &lt;int&gt;  &lt;int&gt; &lt;int&gt;\n1 Athlétisme             Depui…       29            48  1028   1030   1027  3085\n2 Natation(hommes, femm… Depui…       29            37   607    604    603  1814\n3 Lutte                  1896,…       28            18   430    429    499  1358\n# ℹ 2 more variables: Athletes_medailles &lt;chr&gt;, Athletes_or &lt;chr&gt;\n\n\nLes trois disciplines avec le plus de médailles distribuées sont l’athlétisme, la nation et la lutte."
  },
  {
    "objectID": "posts/post-with-code/Exercice 2.html#question-4",
    "href": "posts/post-with-code/Exercice 2.html#question-4",
    "title": "Exercice 2",
    "section": "",
    "text": "data_medaillles_sport_ete |&gt; \n  arrange(Epreuves_2020)\n\n# A tibble: 30 × 10\n   Discipline            Annees Editions Epreuves_2020    Or Argent Bronze Total\n   &lt;chr&gt;                 &lt;chr&gt;     &lt;int&gt;         &lt;int&gt; &lt;int&gt;  &lt;int&gt;  &lt;int&gt; &lt;int&gt;\n 1 Football              1900–…       27             2    34     34     35   103\n 2 Golf                  1900–…        4             2     8      8      9    19\n 3 Handball              1936,…       14             2    26     26     26    78\n 4 Hockey sur gazon      1908,…       24             2    35     35     36   106\n 5 Natation synchronisée Depui…       10             2    20     18     19    57\n 6 Pentathlon moderne    Depui…       25             2    42     42     42   126\n 7 Volley-ball           Depui…       15             2    30     30     30    90\n 8 Water polo            1900,…       26             2    28     28     29    85\n 9 Triathlon             Depui…        6             3    13     13     13    39\n10 Basket-ball           Depui…       20             4    32     32     32    96\n# ℹ 20 more rows\n# ℹ 2 more variables: Athletes_medailles &lt;chr&gt;, Athletes_or &lt;chr&gt;\n\n\nLes sports avec le moins d’épreuves en 2020 et qui avaient que 2 épreuves sont le Football, le Golf, le Handball, le Hockey sur gazon, la Natation synchronisée, le Pentathlon moderne, le Volley-ball et le Water polo."
  },
  {
    "objectID": "posts/post-with-code/Exercice 2.html#question-5-6-et-7",
    "href": "posts/post-with-code/Exercice 2.html#question-5-6-et-7",
    "title": "Exercice 2",
    "section": "",
    "text": "extract_numbers &lt;- function(str) {\n  as.integer(str_extract_all(str, \"\\\\d+\")[[1]])\n}\n\n\n# Fonction de calcul du nombre de JO d'été\ncalcul_nb_editions &lt;- function(date) {\n  r &lt;- strsplit(as.character(date), \",\")[[1]]\n  summer_olympics_years &lt;- integer(0)\n\n  for (part in r) {\n    if (grepl(\"depuis\", part)) {\n      debut &lt;- extract_numbers(part)\n      summer_olympics_years &lt;- c(summer_olympics_years, seq(debut, 2020, by = 4))\n    } else if (grepl(\"-\", part)) {\n      date_debut &lt;- as.integer(strsplit(part, \"-\")[[1]])\n      summer_olympics_years &lt;- c(summer_olympics_years, seq(date_debut[1], date_debut[2], by = 4))\n    } else if (is.numeric(part)) {\n      summer_olympics_years &lt;- c(summer_olympics_years, part)\n    } else {\n      debut &lt;- extract_numbers(part)\n      summer_olympics_years &lt;- c(summer_olympics_years, debut)\n    }\n  }\n\n  # Exclure les années sans JO\n  summer_olympics_years &lt;- setdiff(summer_olympics_years, c(1916, 1940, 1944))\n  nb_editions &lt;- length(unique(summer_olympics_years))\n  return(nb_editions)\n}\n\n# Exemples d'utilisation de la fonction\ncalcul_nb_editions(2000)\n\n[1] 1\n\ncalcul_nb_editions(\"2000\")\n\n[1] 1\n\ncalcul_nb_editions(\"2000-2012\") \n\n[1] 4\n\ncalcul_nb_editions(\"depuis 2000\")\n\n[1] 6\n\n\n\ncalcul_nb_editions(\"1896, 1904, depuis 1920\")\n\n[1] 26\n\n\nL’appel calcul_nb_editions(“1896, 1904, depuis 1920”) rend bien 26.\n\ncalcul_nb_editions(2000)\n\n[1] 1\n\n\nL’appel calcul_nb_editions(2000) rend 1.\n\ncalcul_nb_editions(\"1904–1924, depuis 1948\")\n\n[1] 21\n\n\nL’appel calcul_nb_editions(“1904–1924, depuis 1948”) rend 21."
  },
  {
    "objectID": "posts/post-with-code/Exercice 2.html#question-8",
    "href": "posts/post-with-code/Exercice 2.html#question-8",
    "title": "Exercice 2",
    "section": "",
    "text": "calcul_medailles_individuelles &lt;- function(data_medaillles_sport_ete){\n  medailles &lt;- \"\\\\(\\\\d+-\\\\d+-\\\\d+\\\\)\"\n  data_medaillles_sport_ete$Athletes_medailles &lt;- regmatches(data_medaillles_sport_ete$Athletes_medailles, gregexpr(medailles, data_medaillles_sport_ete$Athletes_medailles))\n  data_medaillles_sport_ete$Athletes_medailles &lt;- sapply(data_medaillles_sport_ete$Athletes_medailles, function(x) ifelse(length(x) &gt; 0, x[1], NA))\n  medaille_max &lt;- max(sapply(strsplit(gsub(\"\\\\(|\\\\)\", \"\", data_medaillles_sport_ete$Athletes_medailles), \"-\"), function(x) sum(as.numeric(x))))\n  return(medaille_max)\n}\n\ncalcul_medailles_individuelles(data_medaillles_sport_ete)\n\n[1] 28\n\n\nLe nombre de médaille maximal obtenu par un athlète lors d’olympiades est de 28."
  },
  {
    "objectID": "posts/post-with-code/Exercice 2.html#question-10",
    "href": "posts/post-with-code/Exercice 2.html#question-10",
    "title": "Exercice 2",
    "section": "",
    "text": "extraire_nationalite_athlete &lt;- function(chaine){\n  nationalites_match &lt;- gregexpr(\"\\\\(([A-Z]+)\\\\)\", chaine)\n  nationalites &lt;- regmatches(chaine, nationalites_match)[[1]]\n  nationalites &lt;- setNames(rep(1, length(nationalites)), nationalites)\n  return(nationalites)\n}\n\nextraire_nationalite_athlete(\"Paavo Nurmi (FIN) (9-3-0) Carl Lewis (USA) (9-1-0)\")\n\n(FIN) (USA) \n    1     1"
  },
  {
    "objectID": "posts/post-with-code/Exercice 3.html",
    "href": "posts/post-with-code/Exercice 3.html",
    "title": "Exercice 3",
    "section": "",
    "text": "#|warning: FALSE\n#|message: FALSE\nlibrary(DBI)\nlibrary(stringr)\nlibrary(lubridate)\n\n\nAttachement du package : 'lubridate'\n\n\nLes objets suivants sont masqués depuis 'package:base':\n\n    date, intersect, setdiff, union\n\nlibrary(arrow)\n\n\nAttachement du package : 'arrow'\n\n\nL'objet suivant est masqué depuis 'package:lubridate':\n\n    duration\n\n\nL'objet suivant est masqué depuis 'package:utils':\n\n    timestamp\n\nlibrary(dplyr)\n\n\nAttachement du package : 'dplyr'\n\n\nLes objets suivants sont masqués depuis 'package:stats':\n\n    filter, lag\n\n\nLes objets suivants sont masqués depuis 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr)\nlibrary(jsonlite)\nlibrary(RSQLite)\n\n\n\n\n\n\nlist.files(path = \".\")\n\n[1] \"Exercice-3.rmarkdown\" \"Exercice 1.qmd\"       \"Exercice 2.html\"     \n[4] \"Exercice 2.qmd\"       \"Exercice 3.qmd\"       \"Exercice 3.rmarkdown\"\n[7] \"image.jpg\"            \"index.qmd\"            \"Question projet.qmd\" \n\n\nLes extensions sont .sqlite, .R, .qmd, .json, .parquet.\n\n\n\n\n\n\n\n#Lire le fichier\nparquet &lt;- arrow::read_parquet(\"C:/Users/valor/OneDrive/Bureau/Master 1/Semestre 2/R avancé et GitHub/exo_cours_3/tokyo_athletes.parquet\")\n\n#Dimension de la table\ndim(parquet)\n\n[1] 11085     3\n\n#Colonnes présentes\ncolnames(parquet)\n\n[1] \"Name\"       \"NOC\"        \"Discipline\"\n\n\nLa table contient 11 085 lignes et 3 colonnes. Les colonnes présentes sont Names, NOC et Discipline.\n\n\n\n\n\n\n\n#Lire le fichier\nathlete_olymp &lt;-read_json(\"C:/Users/valor/OneDrive/Bureau/Master 1/Semestre 2/R avancé et GitHub/exo_cours_3/olympics_athletes.json\",simplifyVector = T)\n\n#Dimension de la table\ndim(athlete_olymp)\n\n[1] 269731     13\n\n#Colonnes présentes\ncolnames(athlete_olymp )\n\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n\n\nLe fichier comporte 269731 lignes et 13 colonnes. Les colonnes sont “ID”,“Name”,“Sex”,“Age”,“Height”,“Weight”,“Team”,“NOC”,“Games”,“City”,“Sport”,“Event” et “Medal”.\n\n\n\n\n\n\n\ncon &lt;- dbConnect(RSQLite::SQLite(), dbname = \"C:/Users/valor/OneDrive/Bureau/Master 1/Semestre 2/R avancé et GitHub/exo_cours_3/data.sqlite\")\n\ndbListTables(con)\n\n[1] \"olympics_athletes\" \"tokyo_athletes\"    \"tokyo_medals\"     \n[4] \"tokyo_teams\"      \n\ndbDisconnect(con)\n\nLes tables présentes sont tokyo_medals et tokyo_teams.\n\n\n\n\n\n\n\ncon &lt;- dbConnect(RSQLite::SQLite(), dbname = \"C:/Users/valor/OneDrive/Bureau/Master 1/Semestre 2/R avancé et GitHub/exo_cours_3/data.sqlite\")\n\nathlete_olymp_df &lt;- as.data.frame(athlete_olymp)\ndbWriteTable(con, name = \"olympics_athletes\", value = athlete_olymp, overwrite = TRUE)\n\ndbWriteTable(con, name = \"tokyo_athletes\", value =parquet, append = TRUE)\n\n\n\n\n\n\n\n\ndbListFields(con, \"olympics_athletes\")\n\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n\n\nLes colonnes sont “ID”,“Name”,“Sex”,“Age”,“Height”,“Weight”,“Team”,“NOC”,“Games”,“City”,“Sport”,“Event” et “Medal”.\n\n\n\n\n\n\n\nolympics_athletes &lt;- dbReadTable(con, \"olympics_athletes\")\n\ndbDisconnect(con)\n\nolympics_athletes_tibble &lt;- as_tibble(olympics_athletes)\n\n\n\n\n\n\n\n\nolympics_athletes_tibble &lt;- olympics_athletes_tibble |&gt; \n  mutate(Sex = factor(Sex))\nolympics_athletes_tibble\n\n# A tibble: 269,731 × 13\n      ID Name      Sex     Age Height Weight Team  NOC   Games City  Sport Event\n   &lt;int&gt; &lt;chr&gt;     &lt;fct&gt; &lt;int&gt;  &lt;int&gt;  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1     1 A Dijiang M        24    180     80 China CHN   1992… Barc… Bask… Bask…\n 2     2 A Lamusi  M        23    170     60 China CHN   2012… Lond… Judo  Judo…\n 3     3 Gunnar N… M        24     NA     NA Denm… DEN   1920… Antw… Foot… Foot…\n 4     4 Edgar Li… M        34     NA     NA Denm… DEN   1900… Paris Tug-… Tug-…\n 5     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 6     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 7     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 8     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 9     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n10     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n# ℹ 269,721 more rows\n# ℹ 1 more variable: Medal &lt;chr&gt;\n\n\n\n\n\n\n\n\n\nolympics_athletes_tibble &lt;- olympics_athletes_tibble |&gt; \n  mutate(\n    Year = as.integer(substring(Games, 1, 4)),\n    isSummer = ifelse(ifelse(grepl(\"Summer\", Games), \"Summer\", \"Winter\")== \"Summer\", TRUE, FALSE))\nolympics_athletes_tibble\n\n# A tibble: 269,731 × 15\n      ID Name      Sex     Age Height Weight Team  NOC   Games City  Sport Event\n   &lt;int&gt; &lt;chr&gt;     &lt;fct&gt; &lt;int&gt;  &lt;int&gt;  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1     1 A Dijiang M        24    180     80 China CHN   1992… Barc… Bask… Bask…\n 2     2 A Lamusi  M        23    170     60 China CHN   2012… Lond… Judo  Judo…\n 3     3 Gunnar N… M        24     NA     NA Denm… DEN   1920… Antw… Foot… Foot…\n 4     4 Edgar Li… M        34     NA     NA Denm… DEN   1900… Paris Tug-… Tug-…\n 5     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 6     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 7     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 8     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 9     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n10     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n# ℹ 269,721 more rows\n# ℹ 3 more variables: Medal &lt;chr&gt;, Year &lt;int&gt;, isSummer &lt;lgl&gt;\n\n\n\n\n\n\n\n\n\n#moyenne age\nmoy_ete &lt;- olympics_athletes_tibble |&gt; \n  filter(isSummer == \"TRUE\") |&gt; \n  group_by(Year) |&gt; \n  summarise(moy_age = mean(Age, na.rm = TRUE))\nprint(moy_ete)\n\n# A tibble: 29 × 2\n    Year moy_age\n   &lt;int&gt;   &lt;dbl&gt;\n 1  1896    23.6\n 2  1900    28.9\n 3  1904    26.7\n 4  1906    27.1\n 5  1908    27.0\n 6  1912    27.5\n 7  1920    29.3\n 8  1924    28.1\n 9  1928    28.0\n10  1932    30.2\n# ℹ 19 more rows\n\n#moyenne la plus faible\njeune &lt;- moy_ete |&gt; \n  filter(moy_age==min(moy_age, na.rm = TRUE))\nprint(jeune)\n\n# A tibble: 1 × 2\n   Year moy_age\n  &lt;int&gt;   &lt;dbl&gt;\n1  1896    23.6\n\n#moyenne la plus haute\nvieux &lt;- moy_ete |&gt; \n  filter(moy_age==max(moy_age, na.rm = TRUE))\nprint(vieux)\n\n# A tibble: 1 × 2\n   Year moy_age\n  &lt;int&gt;   &lt;dbl&gt;\n1  1932    30.2\n\n\nL’édition où les athlétes ont été en moyenne les plus jeunes était 1896. L’édition où les athlétes ont été en moyenne les plus vieux était 1932.\n\n\n\n\n\n\n\nolympics_athletes_tibble |&gt; \n  filter(isSummer == \"TRUE\", Sex == \"F\") |&gt; \n  group_by(Sport) |&gt; \n  summarise(max_taille = ifelse(all(is.na(Height)), NA, max(Height, na.rm = TRUE))) |&gt; \n  arrange(desc(max_taille)) |&gt; \n  slice(1)\n\n# A tibble: 1 × 2\n  Sport      max_taille\n  &lt;chr&gt;           &lt;int&gt;\n1 Basketball        213\n\n\nLa discipline des JO d’été dont la taille des athlètes féminines est la plus grande est le basketball.\n\nolympics_athletes_tibble |&gt;\n  filter(isSummer == \"TRUE\", Sex == \"F\") |&gt;\n  group_by(Year, Sport) |&gt;\n  summarise(max_taille = ifelse(all(is.na(Height)), NA, max(Height, na.rm = TRUE))) |&gt;\n  arrange(Year, desc(max_taille)) |&gt;\n  group_by(Year) |&gt;\n  slice(1) |&gt; \n  print(n=30)\n\n`summarise()` has grouped output by 'Year'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 28 × 3\n# Groups:   Year [28]\n    Year Sport      max_taille\n   &lt;int&gt; &lt;chr&gt;           &lt;int&gt;\n 1  1900 Croquet            NA\n 2  1904 Archery            NA\n 3  1906 Tennis             NA\n 4  1908 Archery            NA\n 5  1912 Diving             NA\n 6  1920 Diving            175\n 7  1924 Fencing           175\n 8  1928 Fencing           183\n 9  1932 Fencing           183\n10  1936 Fencing           183\n11  1948 Athletics         180\n12  1952 Athletics         188\n13  1956 Athletics         185\n14  1960 Swimming          186\n15  1964 Athletics         188\n16  1968 Athletics         188\n17  1972 Athletics         190\n18  1976 Basketball        210\n19  1980 Basketball        210\n20  1984 Basketball        205\n21  1988 Basketball        204\n22  1992 Basketball        204\n23  1996 Basketball        204\n24  2000 Basketball        213\n25  2004 Basketball        202\n26  2008 Basketball        202\n27  2012 Basketball        206\n28  2016 Basketball        203\n\n\nSelon les années les disciplines avec la femme avec la plus grande taille a été : fencing, athletics, swimming et basketball.\n\nresult &lt;- olympics_athletes_tibble |&gt; \n  filter(isSummer == \"TRUE\", Sex == \"F\") |&gt; \n  group_by(Year, Sport) |&gt; \n  summarise(max_taille = ifelse(all(is.na(Height)), NA, max(Height, na.rm = TRUE))) |&gt; \n  arrange(Year, desc(max_taille)) |&gt; \n  group_by(Year) |&gt; \n  slice(1) |&gt; \n  ungroup() |&gt; \n  count(Sport) |&gt; \n  arrange(desc(n))\n\n`summarise()` has grouped output by 'Year'. You can override using the\n`.groups` argument.\n\nprint(result)\n\n# A tibble: 8 × 2\n  Sport          n\n  &lt;chr&gt;      &lt;int&gt;\n1 Basketball    11\n2 Athletics      6\n3 Fencing        4\n4 Archery        2\n5 Diving         2\n6 Croquet        1\n7 Swimming       1\n8 Tennis         1\n\n\n\ntexte &lt;- \"Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois de Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016, ceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du 26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde entier à Paris.\"\n\n\n\n\n\n\n\n\nlibrary(stringr)\nlibrary(lubridate)\ndates_str &lt;- str_extract_all(texte, \"\\\\d{1,2} (Janvier|Février|Mars|Avril|Mai|Juin|Juillet|Août|Septembre|Octobre|Novembre|Décembre) \\\\d{4}\")\ndates_str &lt;- dates_str[[1]]\n# Afficher les dates extraites\nprint(dates_str)\n\n[1] \"5 Août 2016\"     \"20 Août 2016\"    \"23 Juillet 2021\" \"8 Août 2021\"    \n[5] \"26 Juillet 2024\" \"11 Août 2024\"   \n\n\nLes différentes dates des éditions des JO sont : “5 Août 2016”, “20 Août 2016”, “23 Juillet 2021”, “8 Août 2021”, “26 Juillet 2024” et “11 Août 2024”. ## Question 13\n\n\n\n\ndates_num &lt;- str_replace_all(dates_str, c(\"Janvier\" = \"01\", \"Février\" = \"02\", \"Mars\" = \"03\", \"Avril\" = \"04\", \"Mai\" = \"05\", \"Juin\" = \"06\", \"Juillet\" = \"07\", \"Août\" = \"08\", \"Septembre\" = \"09\", \"Octobre\" = \"10\", \"Novembre\" = \"11\", \"Décembre\" = \"12\"))\n\n# Afficher les dates avec les mois en numéros\nprint(dates_num)\n\n[1] \"5 08 2016\"  \"20 08 2016\" \"23 07 2021\" \"8 08 2021\"  \"26 07 2024\"\n[6] \"11 08 2024\"\n\n\n\n\n\n\n\n\n\ndates &lt;- dmy(dates_num)\n\n# Afficher les dates au format Date\nprint(dates)\n\n[1] \"2016-08-05\" \"2016-08-20\" \"2021-07-23\" \"2021-08-08\" \"2024-07-26\"\n[6] \"2024-08-11\"\n\n\nLes dates converties sont : “2016-08-05”, “2016-08-20”, “2021-07-23”, “2021-08-08”, “2024-07-26” et “2024-08-11”.\n\n\n\n\n\n\n\n# Calcul du nombre de jours entre Rio et Tokyo, et Tokyo et Paris\njours_entre_Rio_et_Tokyo &lt;- as.numeric(difftime(dates[3], dates[2], units = \"days\"))\njours_entre_Tokyo_et_Paris &lt;- as.numeric(difftime(dates[5], dates[4], units = \"days\"))\n\n# Calcul en semaines\nsemaines_entre_Rio_et_Tokyo &lt;- jours_entre_Rio_et_Tokyo / 7\nsemaines_entre_Tokyo_et_Paris &lt;- jours_entre_Tokyo_et_Paris / 7\n\n# Afficher les résultats\nprint(paste(\"Jours entre Rio et Tokyo:\", jours_entre_Rio_et_Tokyo))\n\n[1] \"Jours entre Rio et Tokyo: 1798\"\n\nprint(paste(\"Semaines entre Rio et Tokyo:\", semaines_entre_Rio_et_Tokyo))\n\n[1] \"Semaines entre Rio et Tokyo: 256.857142857143\"\n\nprint(paste(\"Jours entre Tokyo et Paris:\", jours_entre_Tokyo_et_Paris))\n\n[1] \"Jours entre Tokyo et Paris: 1083\"\n\nprint(paste(\"Semaines entre Tokyo et Paris:\", semaines_entre_Tokyo_et_Paris))\n\n[1] \"Semaines entre Tokyo et Paris: 154.714285714286\""
  },
  {
    "objectID": "posts/post-with-code/Exercice 3.html#question-1",
    "href": "posts/post-with-code/Exercice 3.html#question-1",
    "title": "Exercice 3",
    "section": "",
    "text": "list.files(path = \".\")\n\n[1] \"Exercice-3.rmarkdown\" \"Exercice 1.qmd\"       \"Exercice 2.html\"     \n[4] \"Exercice 2.qmd\"       \"Exercice 3.qmd\"       \"Exercice 3.rmarkdown\"\n[7] \"image.jpg\"            \"index.qmd\"            \"Question projet.qmd\" \n\n\nLes extensions sont .sqlite, .R, .qmd, .json, .parquet."
  },
  {
    "objectID": "posts/post-with-code/Exercice 3.html#question-2",
    "href": "posts/post-with-code/Exercice 3.html#question-2",
    "title": "Exercice 3",
    "section": "",
    "text": "#Lire le fichier\nparquet &lt;- arrow::read_parquet(\"C:/Users/valor/OneDrive/Bureau/Master 1/Semestre 2/R avancé et GitHub/exo_cours_3/tokyo_athletes.parquet\")\n\n#Dimension de la table\ndim(parquet)\n\n[1] 11085     3\n\n#Colonnes présentes\ncolnames(parquet)\n\n[1] \"Name\"       \"NOC\"        \"Discipline\"\n\n\nLa table contient 11 085 lignes et 3 colonnes. Les colonnes présentes sont Names, NOC et Discipline."
  },
  {
    "objectID": "posts/post-with-code/Exercice 3.html#question-3",
    "href": "posts/post-with-code/Exercice 3.html#question-3",
    "title": "Exercice 3",
    "section": "",
    "text": "#Lire le fichier\nathlete_olymp &lt;-read_json(\"C:/Users/valor/OneDrive/Bureau/Master 1/Semestre 2/R avancé et GitHub/exo_cours_3/olympics_athletes.json\",simplifyVector = T)\n\n#Dimension de la table\ndim(athlete_olymp)\n\n[1] 269731     13\n\n#Colonnes présentes\ncolnames(athlete_olymp )\n\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n\n\nLe fichier comporte 269731 lignes et 13 colonnes. Les colonnes sont “ID”,“Name”,“Sex”,“Age”,“Height”,“Weight”,“Team”,“NOC”,“Games”,“City”,“Sport”,“Event” et “Medal”."
  },
  {
    "objectID": "posts/post-with-code/Exercice 3.html#question-4",
    "href": "posts/post-with-code/Exercice 3.html#question-4",
    "title": "Exercice 3",
    "section": "",
    "text": "con &lt;- dbConnect(RSQLite::SQLite(), dbname = \"C:/Users/valor/OneDrive/Bureau/Master 1/Semestre 2/R avancé et GitHub/exo_cours_3/data.sqlite\")\n\ndbListTables(con)\n\n[1] \"olympics_athletes\" \"tokyo_athletes\"    \"tokyo_medals\"     \n[4] \"tokyo_teams\"      \n\ndbDisconnect(con)\n\nLes tables présentes sont tokyo_medals et tokyo_teams."
  },
  {
    "objectID": "posts/post-with-code/Exercice 3.html#question-5",
    "href": "posts/post-with-code/Exercice 3.html#question-5",
    "title": "Exercice 3",
    "section": "",
    "text": "con &lt;- dbConnect(RSQLite::SQLite(), dbname = \"C:/Users/valor/OneDrive/Bureau/Master 1/Semestre 2/R avancé et GitHub/exo_cours_3/data.sqlite\")\n\nathlete_olymp_df &lt;- as.data.frame(athlete_olymp)\ndbWriteTable(con, name = \"olympics_athletes\", value = athlete_olymp, overwrite = TRUE)\n\ndbWriteTable(con, name = \"tokyo_athletes\", value =parquet, append = TRUE)"
  },
  {
    "objectID": "posts/post-with-code/Exercice 3.html#question-6",
    "href": "posts/post-with-code/Exercice 3.html#question-6",
    "title": "Exercice 3",
    "section": "",
    "text": "dbListFields(con, \"olympics_athletes\")\n\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n\n\nLes colonnes sont “ID”,“Name”,“Sex”,“Age”,“Height”,“Weight”,“Team”,“NOC”,“Games”,“City”,“Sport”,“Event” et “Medal”."
  },
  {
    "objectID": "posts/post-with-code/Exercice 3.html#question-7",
    "href": "posts/post-with-code/Exercice 3.html#question-7",
    "title": "Exercice 3",
    "section": "",
    "text": "olympics_athletes &lt;- dbReadTable(con, \"olympics_athletes\")\n\ndbDisconnect(con)\n\nolympics_athletes_tibble &lt;- as_tibble(olympics_athletes)"
  },
  {
    "objectID": "posts/post-with-code/Exercice 3.html#question-8",
    "href": "posts/post-with-code/Exercice 3.html#question-8",
    "title": "Exercice 3",
    "section": "",
    "text": "olympics_athletes_tibble &lt;- olympics_athletes_tibble |&gt; \n  mutate(Sex = factor(Sex))\nolympics_athletes_tibble\n\n# A tibble: 269,731 × 13\n      ID Name      Sex     Age Height Weight Team  NOC   Games City  Sport Event\n   &lt;int&gt; &lt;chr&gt;     &lt;fct&gt; &lt;int&gt;  &lt;int&gt;  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1     1 A Dijiang M        24    180     80 China CHN   1992… Barc… Bask… Bask…\n 2     2 A Lamusi  M        23    170     60 China CHN   2012… Lond… Judo  Judo…\n 3     3 Gunnar N… M        24     NA     NA Denm… DEN   1920… Antw… Foot… Foot…\n 4     4 Edgar Li… M        34     NA     NA Denm… DEN   1900… Paris Tug-… Tug-…\n 5     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 6     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 7     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 8     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 9     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n10     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n# ℹ 269,721 more rows\n# ℹ 1 more variable: Medal &lt;chr&gt;"
  },
  {
    "objectID": "posts/post-with-code/Exercice 3.html#question-9",
    "href": "posts/post-with-code/Exercice 3.html#question-9",
    "title": "Exercice 3",
    "section": "",
    "text": "olympics_athletes_tibble &lt;- olympics_athletes_tibble |&gt; \n  mutate(\n    Year = as.integer(substring(Games, 1, 4)),\n    isSummer = ifelse(ifelse(grepl(\"Summer\", Games), \"Summer\", \"Winter\")== \"Summer\", TRUE, FALSE))\nolympics_athletes_tibble\n\n# A tibble: 269,731 × 15\n      ID Name      Sex     Age Height Weight Team  NOC   Games City  Sport Event\n   &lt;int&gt; &lt;chr&gt;     &lt;fct&gt; &lt;int&gt;  &lt;int&gt;  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1     1 A Dijiang M        24    180     80 China CHN   1992… Barc… Bask… Bask…\n 2     2 A Lamusi  M        23    170     60 China CHN   2012… Lond… Judo  Judo…\n 3     3 Gunnar N… M        24     NA     NA Denm… DEN   1920… Antw… Foot… Foot…\n 4     4 Edgar Li… M        34     NA     NA Denm… DEN   1900… Paris Tug-… Tug-…\n 5     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 6     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 7     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 8     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 9     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n10     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n# ℹ 269,721 more rows\n# ℹ 3 more variables: Medal &lt;chr&gt;, Year &lt;int&gt;, isSummer &lt;lgl&gt;"
  },
  {
    "objectID": "posts/post-with-code/Exercice 3.html#question-10",
    "href": "posts/post-with-code/Exercice 3.html#question-10",
    "title": "Exercice 3",
    "section": "",
    "text": "#moyenne age\nmoy_ete &lt;- olympics_athletes_tibble |&gt; \n  filter(isSummer == \"TRUE\") |&gt; \n  group_by(Year) |&gt; \n  summarise(moy_age = mean(Age, na.rm = TRUE))\nprint(moy_ete)\n\n# A tibble: 29 × 2\n    Year moy_age\n   &lt;int&gt;   &lt;dbl&gt;\n 1  1896    23.6\n 2  1900    28.9\n 3  1904    26.7\n 4  1906    27.1\n 5  1908    27.0\n 6  1912    27.5\n 7  1920    29.3\n 8  1924    28.1\n 9  1928    28.0\n10  1932    30.2\n# ℹ 19 more rows\n\n#moyenne la plus faible\njeune &lt;- moy_ete |&gt; \n  filter(moy_age==min(moy_age, na.rm = TRUE))\nprint(jeune)\n\n# A tibble: 1 × 2\n   Year moy_age\n  &lt;int&gt;   &lt;dbl&gt;\n1  1896    23.6\n\n#moyenne la plus haute\nvieux &lt;- moy_ete |&gt; \n  filter(moy_age==max(moy_age, na.rm = TRUE))\nprint(vieux)\n\n# A tibble: 1 × 2\n   Year moy_age\n  &lt;int&gt;   &lt;dbl&gt;\n1  1932    30.2\n\n\nL’édition où les athlétes ont été en moyenne les plus jeunes était 1896. L’édition où les athlétes ont été en moyenne les plus vieux était 1932."
  },
  {
    "objectID": "posts/post-with-code/Exercice 3.html#question-11",
    "href": "posts/post-with-code/Exercice 3.html#question-11",
    "title": "Exercice 3",
    "section": "",
    "text": "olympics_athletes_tibble |&gt; \n  filter(isSummer == \"TRUE\", Sex == \"F\") |&gt; \n  group_by(Sport) |&gt; \n  summarise(max_taille = ifelse(all(is.na(Height)), NA, max(Height, na.rm = TRUE))) |&gt; \n  arrange(desc(max_taille)) |&gt; \n  slice(1)\n\n# A tibble: 1 × 2\n  Sport      max_taille\n  &lt;chr&gt;           &lt;int&gt;\n1 Basketball        213\n\n\nLa discipline des JO d’été dont la taille des athlètes féminines est la plus grande est le basketball.\n\nolympics_athletes_tibble |&gt;\n  filter(isSummer == \"TRUE\", Sex == \"F\") |&gt;\n  group_by(Year, Sport) |&gt;\n  summarise(max_taille = ifelse(all(is.na(Height)), NA, max(Height, na.rm = TRUE))) |&gt;\n  arrange(Year, desc(max_taille)) |&gt;\n  group_by(Year) |&gt;\n  slice(1) |&gt; \n  print(n=30)\n\n`summarise()` has grouped output by 'Year'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 28 × 3\n# Groups:   Year [28]\n    Year Sport      max_taille\n   &lt;int&gt; &lt;chr&gt;           &lt;int&gt;\n 1  1900 Croquet            NA\n 2  1904 Archery            NA\n 3  1906 Tennis             NA\n 4  1908 Archery            NA\n 5  1912 Diving             NA\n 6  1920 Diving            175\n 7  1924 Fencing           175\n 8  1928 Fencing           183\n 9  1932 Fencing           183\n10  1936 Fencing           183\n11  1948 Athletics         180\n12  1952 Athletics         188\n13  1956 Athletics         185\n14  1960 Swimming          186\n15  1964 Athletics         188\n16  1968 Athletics         188\n17  1972 Athletics         190\n18  1976 Basketball        210\n19  1980 Basketball        210\n20  1984 Basketball        205\n21  1988 Basketball        204\n22  1992 Basketball        204\n23  1996 Basketball        204\n24  2000 Basketball        213\n25  2004 Basketball        202\n26  2008 Basketball        202\n27  2012 Basketball        206\n28  2016 Basketball        203\n\n\nSelon les années les disciplines avec la femme avec la plus grande taille a été : fencing, athletics, swimming et basketball.\n\nresult &lt;- olympics_athletes_tibble |&gt; \n  filter(isSummer == \"TRUE\", Sex == \"F\") |&gt; \n  group_by(Year, Sport) |&gt; \n  summarise(max_taille = ifelse(all(is.na(Height)), NA, max(Height, na.rm = TRUE))) |&gt; \n  arrange(Year, desc(max_taille)) |&gt; \n  group_by(Year) |&gt; \n  slice(1) |&gt; \n  ungroup() |&gt; \n  count(Sport) |&gt; \n  arrange(desc(n))\n\n`summarise()` has grouped output by 'Year'. You can override using the\n`.groups` argument.\n\nprint(result)\n\n# A tibble: 8 × 2\n  Sport          n\n  &lt;chr&gt;      &lt;int&gt;\n1 Basketball    11\n2 Athletics      6\n3 Fencing        4\n4 Archery        2\n5 Diving         2\n6 Croquet        1\n7 Swimming       1\n8 Tennis         1\n\n\n\ntexte &lt;- \"Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois de Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016, ceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du 26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde entier à Paris.\""
  },
  {
    "objectID": "posts/post-with-code/Exercice 3.html#question-12",
    "href": "posts/post-with-code/Exercice 3.html#question-12",
    "title": "Exercice 3",
    "section": "",
    "text": "library(stringr)\nlibrary(lubridate)\ndates_str &lt;- str_extract_all(texte, \"\\\\d{1,2} (Janvier|Février|Mars|Avril|Mai|Juin|Juillet|Août|Septembre|Octobre|Novembre|Décembre) \\\\d{4}\")\ndates_str &lt;- dates_str[[1]]\n# Afficher les dates extraites\nprint(dates_str)\n\n[1] \"5 Août 2016\"     \"20 Août 2016\"    \"23 Juillet 2021\" \"8 Août 2021\"    \n[5] \"26 Juillet 2024\" \"11 Août 2024\"   \n\n\nLes différentes dates des éditions des JO sont : “5 Août 2016”, “20 Août 2016”, “23 Juillet 2021”, “8 Août 2021”, “26 Juillet 2024” et “11 Août 2024”. ## Question 13\n\n\n\n\ndates_num &lt;- str_replace_all(dates_str, c(\"Janvier\" = \"01\", \"Février\" = \"02\", \"Mars\" = \"03\", \"Avril\" = \"04\", \"Mai\" = \"05\", \"Juin\" = \"06\", \"Juillet\" = \"07\", \"Août\" = \"08\", \"Septembre\" = \"09\", \"Octobre\" = \"10\", \"Novembre\" = \"11\", \"Décembre\" = \"12\"))\n\n# Afficher les dates avec les mois en numéros\nprint(dates_num)\n\n[1] \"5 08 2016\"  \"20 08 2016\" \"23 07 2021\" \"8 08 2021\"  \"26 07 2024\"\n[6] \"11 08 2024\""
  },
  {
    "objectID": "posts/post-with-code/Exercice 3.html#question-14",
    "href": "posts/post-with-code/Exercice 3.html#question-14",
    "title": "Exercice 3",
    "section": "",
    "text": "dates &lt;- dmy(dates_num)\n\n# Afficher les dates au format Date\nprint(dates)\n\n[1] \"2016-08-05\" \"2016-08-20\" \"2021-07-23\" \"2021-08-08\" \"2024-07-26\"\n[6] \"2024-08-11\"\n\n\nLes dates converties sont : “2016-08-05”, “2016-08-20”, “2021-07-23”, “2021-08-08”, “2024-07-26” et “2024-08-11”."
  },
  {
    "objectID": "posts/post-with-code/Exercice 3.html#question-15",
    "href": "posts/post-with-code/Exercice 3.html#question-15",
    "title": "Exercice 3",
    "section": "",
    "text": "# Calcul du nombre de jours entre Rio et Tokyo, et Tokyo et Paris\njours_entre_Rio_et_Tokyo &lt;- as.numeric(difftime(dates[3], dates[2], units = \"days\"))\njours_entre_Tokyo_et_Paris &lt;- as.numeric(difftime(dates[5], dates[4], units = \"days\"))\n\n# Calcul en semaines\nsemaines_entre_Rio_et_Tokyo &lt;- jours_entre_Rio_et_Tokyo / 7\nsemaines_entre_Tokyo_et_Paris &lt;- jours_entre_Tokyo_et_Paris / 7\n\n# Afficher les résultats\nprint(paste(\"Jours entre Rio et Tokyo:\", jours_entre_Rio_et_Tokyo))\n\n[1] \"Jours entre Rio et Tokyo: 1798\"\n\nprint(paste(\"Semaines entre Rio et Tokyo:\", semaines_entre_Rio_et_Tokyo))\n\n[1] \"Semaines entre Rio et Tokyo: 256.857142857143\"\n\nprint(paste(\"Jours entre Tokyo et Paris:\", jours_entre_Tokyo_et_Paris))\n\n[1] \"Jours entre Tokyo et Paris: 1083\"\n\nprint(paste(\"Semaines entre Tokyo et Paris:\", semaines_entre_Tokyo_et_Paris))\n\n[1] \"Semaines entre Tokyo et Paris: 154.714285714286\""
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Prévision météo",
    "section": "",
    "text": "Ce package permet de savoir la température, la température ressentie, la précipitation et la probabilité de précipitation à partir d’une addresse ou d’un vecteur de coordonnées.\nPour installer cette librairie il faut d’abord avoir installer le package remote et ensuite installer le package getweather.\n\ninstall.packages(\"remotes\")\nremotes::install_github(\"Valorys/packageweather\")\n\nPrévision météo pour le stade de France :\n\nlibrary(getweather)\nget_forecast(\"stade de France\")\n\nPassing 1 address to the Nominatim single address geocoder\n\n\nQuery completed in: 1.1 seconds\n\n\n# A tibble: 168 × 5\n   date_heure     temperature_celsius temperature_ressenti…¹ precipitation_proba\n   &lt;chr&gt;                        &lt;dbl&gt;                  &lt;dbl&gt;               &lt;int&gt;\n 1 2024-03-05T00…                 7                      4.2                  13\n 2 2024-03-05T01…                 6.9                    4                     9\n 3 2024-03-05T02…                 6.8                    3.8                   4\n 4 2024-03-05T03…                 6.9                    4.2                   0\n 5 2024-03-05T04…                 6.7                    4.2                   1\n 6 2024-03-05T05…                 6.9                    4.8                   2\n 7 2024-03-05T06…                 7.2                    4.7                   3\n 8 2024-03-05T07…                 7.1                    4.4                   2\n 9 2024-03-05T08…                 7.2                    4.4                   1\n10 2024-03-05T09…                 7.8                    4.5                   0\n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​temperature_ressentie_celsius\n# ℹ 1 more variable: precipitation &lt;dbl&gt;\n\n\nPrévision météo pour Tahiti :\n\nget_forecast(\"Tahiti\")\n\nPassing 1 address to the Nominatim single address geocoder\n\n\nQuery completed in: 1 seconds\n\n\n# A tibble: 168 × 5\n   date_heure     temperature_celsius temperature_ressenti…¹ precipitation_proba\n   &lt;chr&gt;                        &lt;dbl&gt;                  &lt;dbl&gt;               &lt;int&gt;\n 1 2024-03-05T00…                17.7                   19.1                  42\n 2 2024-03-05T01…                17.6                   18.8                  48\n 3 2024-03-05T02…                17.6                   18.4                  55\n 4 2024-03-05T03…                17.7                   18.6                  61\n 5 2024-03-05T04…                17.8                   18.7                  65\n 6 2024-03-05T05…                17.8                   19                    70\n 7 2024-03-05T06…                17.7                   18.8                  74\n 8 2024-03-05T07…                17.6                   18.3                  83\n 9 2024-03-05T08…                17.6                   18.4                  91\n10 2024-03-05T09…                17.6                   18.5                 100\n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​temperature_ressentie_celsius\n# ℹ 1 more variable: precipitation &lt;dbl&gt;\n\n\nPrévision météo pour les coordonnées gps 43.276703, 5.334791 :\n\nget_forecast(c(43.276703,\n5.334791 ))\n\n# A tibble: 168 × 5\n   date_heure     temperature_celsius temperature_ressenti…¹ precipitation_proba\n   &lt;chr&gt;                        &lt;dbl&gt;                  &lt;dbl&gt;               &lt;int&gt;\n 1 2024-03-05T00…                10.1                    4.4                   0\n 2 2024-03-05T01…                10.4                    4.4                   0\n 3 2024-03-05T02…                 9.9                    5.9                   0\n 4 2024-03-05T03…                10.1                    4.7                   0\n 5 2024-03-05T04…                 9.8                    4.1                   0\n 6 2024-03-05T05…                 9.4                    4.4                   0\n 7 2024-03-05T06…                 9.1                    4.3                   0\n 8 2024-03-05T07…                 9.4                    4.9                   0\n 9 2024-03-05T08…                 9.8                    5.9                   0\n10 2024-03-05T09…                11.7                    6.5                   0\n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​temperature_ressentie_celsius\n# ℹ 1 more variable: precipitation &lt;dbl&gt;\n\nvisu_temp(c(43.276703,\n5.334791 ))\n\nWarning: Use of `forecast_data$date_heure` is discouraged.\nℹ Use `date_heure` instead.\n\n\nWarning: Use of `forecast_data$temperature_celsius` is discouraged.\nℹ Use `temperature_celsius` instead.\n\n\n\n\nvisu_temp_ressentie(c(43.276703,\n5.334791 ))\n\nWarning: Use of `forecast_data$date_heure` is discouraged.\nℹ Use `date_heure` instead.\n\n\nWarning: Use of `forecast_data$temperature_ressentie_celsius` is discouraged.\nℹ Use `temperature_ressentie_celsius` instead.\n\n\n\n\nvisu_precipitation(c(43.276703,\n5.334791 ))\n\nWarning: Use of `forecast_data$date_heure` is discouraged.\nℹ Use `date_heure` instead.\n\n\nWarning: Use of `forecast_data$precipitation` is discouraged.\nℹ Use `precipitation` instead."
  },
  {
    "objectID": "posts/post-with-code/index.html#librairie-getweather",
    "href": "posts/post-with-code/index.html#librairie-getweather",
    "title": "Prévision météo",
    "section": "",
    "text": "Ce package permet de savoir la température, la température ressentie, la précipitation et la probabilité de précipitation à partir d’une addresse ou d’un vecteur de coordonnées.\nPour installer cette librairie il faut d’abord avoir installer le package remote et ensuite installer le package getweather.\n\ninstall.packages(\"remotes\")\nremotes::install_github(\"Valorys/packageweather\")\n\nPrévision météo pour le stade de France :\n\nlibrary(getweather)\nget_forecast(\"stade de France\")\n\nPassing 1 address to the Nominatim single address geocoder\n\n\nQuery completed in: 1.1 seconds\n\n\n# A tibble: 168 × 5\n   date_heure     temperature_celsius temperature_ressenti…¹ precipitation_proba\n   &lt;chr&gt;                        &lt;dbl&gt;                  &lt;dbl&gt;               &lt;int&gt;\n 1 2024-03-05T00…                 7                      4.2                  13\n 2 2024-03-05T01…                 6.9                    4                     9\n 3 2024-03-05T02…                 6.8                    3.8                   4\n 4 2024-03-05T03…                 6.9                    4.2                   0\n 5 2024-03-05T04…                 6.7                    4.2                   1\n 6 2024-03-05T05…                 6.9                    4.8                   2\n 7 2024-03-05T06…                 7.2                    4.7                   3\n 8 2024-03-05T07…                 7.1                    4.4                   2\n 9 2024-03-05T08…                 7.2                    4.4                   1\n10 2024-03-05T09…                 7.8                    4.5                   0\n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​temperature_ressentie_celsius\n# ℹ 1 more variable: precipitation &lt;dbl&gt;\n\n\nPrévision météo pour Tahiti :\n\nget_forecast(\"Tahiti\")\n\nPassing 1 address to the Nominatim single address geocoder\n\n\nQuery completed in: 1 seconds\n\n\n# A tibble: 168 × 5\n   date_heure     temperature_celsius temperature_ressenti…¹ precipitation_proba\n   &lt;chr&gt;                        &lt;dbl&gt;                  &lt;dbl&gt;               &lt;int&gt;\n 1 2024-03-05T00…                17.7                   19.1                  42\n 2 2024-03-05T01…                17.6                   18.8                  48\n 3 2024-03-05T02…                17.6                   18.4                  55\n 4 2024-03-05T03…                17.7                   18.6                  61\n 5 2024-03-05T04…                17.8                   18.7                  65\n 6 2024-03-05T05…                17.8                   19                    70\n 7 2024-03-05T06…                17.7                   18.8                  74\n 8 2024-03-05T07…                17.6                   18.3                  83\n 9 2024-03-05T08…                17.6                   18.4                  91\n10 2024-03-05T09…                17.6                   18.5                 100\n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​temperature_ressentie_celsius\n# ℹ 1 more variable: precipitation &lt;dbl&gt;\n\n\nPrévision météo pour les coordonnées gps 43.276703, 5.334791 :\n\nget_forecast(c(43.276703,\n5.334791 ))\n\n# A tibble: 168 × 5\n   date_heure     temperature_celsius temperature_ressenti…¹ precipitation_proba\n   &lt;chr&gt;                        &lt;dbl&gt;                  &lt;dbl&gt;               &lt;int&gt;\n 1 2024-03-05T00…                10.1                    4.4                   0\n 2 2024-03-05T01…                10.4                    4.4                   0\n 3 2024-03-05T02…                 9.9                    5.9                   0\n 4 2024-03-05T03…                10.1                    4.7                   0\n 5 2024-03-05T04…                 9.8                    4.1                   0\n 6 2024-03-05T05…                 9.4                    4.4                   0\n 7 2024-03-05T06…                 9.1                    4.3                   0\n 8 2024-03-05T07…                 9.4                    4.9                   0\n 9 2024-03-05T08…                 9.8                    5.9                   0\n10 2024-03-05T09…                11.7                    6.5                   0\n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​temperature_ressentie_celsius\n# ℹ 1 more variable: precipitation &lt;dbl&gt;\n\nvisu_temp(c(43.276703,\n5.334791 ))\n\nWarning: Use of `forecast_data$date_heure` is discouraged.\nℹ Use `date_heure` instead.\n\n\nWarning: Use of `forecast_data$temperature_celsius` is discouraged.\nℹ Use `temperature_celsius` instead.\n\n\n\n\nvisu_temp_ressentie(c(43.276703,\n5.334791 ))\n\nWarning: Use of `forecast_data$date_heure` is discouraged.\nℹ Use `date_heure` instead.\n\n\nWarning: Use of `forecast_data$temperature_ressentie_celsius` is discouraged.\nℹ Use `temperature_ressentie_celsius` instead.\n\n\n\n\nvisu_precipitation(c(43.276703,\n5.334791 ))\n\nWarning: Use of `forecast_data$date_heure` is discouraged.\nℹ Use `date_heure` instead.\n\n\nWarning: Use of `forecast_data$precipitation` is discouraged.\nℹ Use `precipitation` instead."
  },
  {
    "objectID": "posts/post-with-code/Question projet.html#création-du-projet-de-site-sous",
    "href": "posts/post-with-code/Question projet.html#création-du-projet-de-site-sous",
    "title": "Question projet",
    "section": "Création du projet de site sous",
    "text": "Création du projet de site sous\n\nQuestion 1 : Créez un nouveau projet sous RStudio, que vous appelerez my_blog. Ce projet sera créé en utilisant le template quarto blog. Cochez les options renv et git pour les utiliser. Décrivez la structure du projet.\nLe projet est contenu dans le projet racine “mon_blog”. Il contient en plus les fichier “_quarto” et “renv”. Il contient aussi le dossier docs où se trouve les codes des différents articles du blog.\n\n\nQuestion 6 : Faites un commit de l’ensemble des fichiers, puis un push. Que voyez-vous désormais sous github ?\nEn effectuant ces commandes nous pouvons voir sur github le réperoire principal du projet ainsi que tous les fichiers et dossiers."
  },
  {
    "objectID": "posts/post-with-code/Question projet.html#un-package-sous-github",
    "href": "posts/post-with-code/Question projet.html#un-package-sous-github",
    "title": "Question projet",
    "section": "Un package sous github",
    "text": "Un package sous github\n\nQuestion 9 : . Fermez le projet RStudio et redémarrez un nouveau terminal R. Depuis ce terminal, installez le packages remotes. Que se passe t’il quand vous exécutez la commande remotes::install_github(“/olympicsWeather”) (remplacez  par votre username github) ?\nCette commande permet de télécharger le package depuis mon github."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Bienvenue sur mon blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "blog",
    "section": "",
    "text": "Bienvenue sur mon premier blog !\nVous trouverez sur ces blog différents exercices fait lors de mon cours de R en master.\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nPrévision météo\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 5, 2024\n\n\nValorys Trillaud\n\n\n\n\n\n\n  \n\n\n\n\nExercice 1\n\n\n\n\n\n\n\nnews\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 4, 2024\n\n\nValorys Trillaud\n\n\n\n\n\n\n  \n\n\n\n\nExercice 2\n\n\n\n\n\n\n\nnews\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 4, 2024\n\n\nValorys Trillaud\n\n\n\n\n\n\n  \n\n\n\n\nExercice 3\n\n\n\n\n\n\n\nnews\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 4, 2024\n\n\nValorys Trillaud\n\n\n\n\n\n\n  \n\n\n\n\nQuestion projet\n\n\n\n\n\n\n\nnews\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 4, 2024\n\n\nValorys Trillaud\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "A propos de ce blog !\nJ’ai créer ce blog dans le cadre d’un cours sur R et github afin de prendre en main ces outils."
  }
]