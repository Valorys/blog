{
  "hash": "ae0a3bc6fd0056317e71518fd3b69fc9",
  "result": {
    "markdown": "---\ntitle: \"Exercice 3\"\nauthor: \"Valorys Trillaud\"\ndate: \"2024-03-04\"\ncategories: [news, analysis]\nformat: html\n---\n\n\n# Exercice semaine 3\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|warning: FALSE\n#|message: FALSE\nlibrary(DBI)\nlibrary(stringr)\nlibrary(lubridate)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttachement du package : 'lubridate'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLes objets suivants sont masqués depuis 'package:base':\n\n    date, intersect, setdiff, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(arrow)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttachement du package : 'arrow'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nL'objet suivant est masqué depuis 'package:lubridate':\n\n    duration\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nL'objet suivant est masqué depuis 'package:utils':\n\n    timestamp\n```\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttachement du package : 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLes objets suivants sont masqués depuis 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLes objets suivants sont masqués depuis 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyr)\nlibrary(jsonlite)\nlibrary(RSQLite)\n```\n:::\n\n\n## Question 1\n\n### Listez les fichiers présents dans le dossier data. Quelles sont les extensions des différents fichiers ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.files(path = \".\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Exercice-3.rmarkdown\" \"Exercice 1.qmd\"       \"Exercice 2.html\"     \n[4] \"Exercice 2.qmd\"       \"Exercice 3.qmd\"       \"Exercice 3.rmarkdown\"\n[7] \"image.jpg\"            \"index.qmd\"            \"Question projet.qmd\" \n```\n:::\n:::\n\n\nLes extensions sont .sqlite, .R, .qmd, .json, .parquet.\n\n## Question 2\n\n### Quelles sont les dimensions de la table ? Quelles sont les colonnes présentes ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Lire le fichier\nparquet <- arrow::read_parquet(\"C:/Users/valor/OneDrive/Bureau/Master 1/Semestre 2/R avancé et GitHub/exo_cours_3/tokyo_athletes.parquet\")\n\n#Dimension de la table\ndim(parquet)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11085     3\n```\n:::\n\n```{.r .cell-code}\n#Colonnes présentes\ncolnames(parquet)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Name\"       \"NOC\"        \"Discipline\"\n```\n:::\n:::\n\n\nLa table contient 11 085 lignes et 3 colonnes. Les colonnes présentes sont Names, NOC et Discipline.\n\n## Question 3\n\n### Quelles sont les dimensions de la table ? Quelles sont les colonnes présentes ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Lire le fichier\nathlete_olymp <-read_json(\"C:/Users/valor/OneDrive/Bureau/Master 1/Semestre 2/R avancé et GitHub/exo_cours_3/olympics_athletes.json\",simplifyVector = T)\n\n#Dimension de la table\ndim(athlete_olymp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 269731     13\n```\n:::\n\n```{.r .cell-code}\n#Colonnes présentes\ncolnames(athlete_olymp )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n```\n:::\n:::\n\n\nLe fichier comporte 269731 lignes et 13 colonnes. Les colonnes sont \"ID\",\"Name\",\"Sex\",\"Age\",\"Height\",\"Weight\",\"Team\",\"NOC\",\"Games\",\"City\",\"Sport\",\"Event\" et \"Medal\".\n\n## Question 4\n\n### Importez la librairie RSQLite, et ouvrez une connexion à la base de données sqlite en utilisant la fonction dbConnect. Quelles sont les tables présentes dans la table ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncon <- dbConnect(RSQLite::SQLite(), dbname = \"C:/Users/valor/OneDrive/Bureau/Master 1/Semestre 2/R avancé et GitHub/exo_cours_3/data.sqlite\")\n\ndbListTables(con)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"olympics_athletes\" \"tokyo_athletes\"    \"tokyo_medals\"     \n[4] \"tokyo_teams\"      \n```\n:::\n\n```{.r .cell-code}\ndbDisconnect(con)\n```\n:::\n\n\nLes tables présentes sont tokyo_medals et tokyo_teams.\n\n## Question 5\n\n### Créez deux nouvelles tables dans la base de données\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncon <- dbConnect(RSQLite::SQLite(), dbname = \"C:/Users/valor/OneDrive/Bureau/Master 1/Semestre 2/R avancé et GitHub/exo_cours_3/data.sqlite\")\n\nathlete_olymp_df <- as.data.frame(athlete_olymp)\ndbWriteTable(con, name = \"olympics_athletes\", value = athlete_olymp, overwrite = TRUE)\n\ndbWriteTable(con, name = \"tokyo_athletes\", value =parquet, append = TRUE)\n```\n:::\n\n\n## Question 6\n\n### Inspectez la table olympics_athletes en utilisant la fonction dbListFields. Quelles sont les colonnes de la table ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbListFields(con, \"olympics_athletes\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n```\n:::\n:::\n\n\nLes colonnes sont \"ID\",\"Name\",\"Sex\",\"Age\",\"Height\",\"Weight\",\"Team\",\"NOC\",\"Games\",\"City\",\"Sport\",\"Event\" et \"Medal\".\n\n## Question 7\n\n### Importez cette table depuis la base de données en utilisant la fonction dbReadTable. Convertissez la table en tibble en utilisant la fonction as_tibble.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes <- dbReadTable(con, \"olympics_athletes\")\n\ndbDisconnect(con)\n\nolympics_athletes_tibble <- as_tibble(olympics_athletes)\n```\n:::\n\n\n## Question 8\n\n### Convertissez la colonne Sex en variable catégorielle avec la fonction mutate.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes_tibble <- olympics_athletes_tibble |> \n  mutate(Sex = factor(Sex))\nolympics_athletes_tibble\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 269,731 × 13\n      ID Name      Sex     Age Height Weight Team  NOC   Games City  Sport Event\n   <int> <chr>     <fct> <int>  <int>  <dbl> <chr> <chr> <chr> <chr> <chr> <chr>\n 1     1 A Dijiang M        24    180     80 China CHN   1992… Barc… Bask… Bask…\n 2     2 A Lamusi  M        23    170     60 China CHN   2012… Lond… Judo  Judo…\n 3     3 Gunnar N… M        24     NA     NA Denm… DEN   1920… Antw… Foot… Foot…\n 4     4 Edgar Li… M        34     NA     NA Denm… DEN   1900… Paris Tug-… Tug-…\n 5     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 6     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 7     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 8     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 9     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n10     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n# ℹ 269,721 more rows\n# ℹ 1 more variable: Medal <chr>\n```\n:::\n:::\n\n\n## Question 9\n\n### Créez deux colonnes à partir de la colonne Games. La première colonne Year sera une colonne de type integer contenant l'année des jeux. La deuxième colonne isSummer sera une colonne booléenne qui indiquera si les jeux sont des jeux d'été ou d'hiver.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes_tibble <- olympics_athletes_tibble |> \n  mutate(\n    Year = as.integer(substring(Games, 1, 4)),\n    isSummer = ifelse(ifelse(grepl(\"Summer\", Games), \"Summer\", \"Winter\")== \"Summer\", TRUE, FALSE))\nolympics_athletes_tibble\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 269,731 × 15\n      ID Name      Sex     Age Height Weight Team  NOC   Games City  Sport Event\n   <int> <chr>     <fct> <int>  <int>  <dbl> <chr> <chr> <chr> <chr> <chr> <chr>\n 1     1 A Dijiang M        24    180     80 China CHN   1992… Barc… Bask… Bask…\n 2     2 A Lamusi  M        23    170     60 China CHN   2012… Lond… Judo  Judo…\n 3     3 Gunnar N… M        24     NA     NA Denm… DEN   1920… Antw… Foot… Foot…\n 4     4 Edgar Li… M        34     NA     NA Denm… DEN   1900… Paris Tug-… Tug-…\n 5     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 6     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 7     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 8     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 9     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n10     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n# ℹ 269,721 more rows\n# ℹ 3 more variables: Medal <chr>, Year <int>, isSummer <lgl>\n```\n:::\n:::\n\n\n## Question 10\n\n### Calculez la moyenne d'age des athletes pour chacune des éditions des JO d'été. Quelle édition a compté les athlètes les plus jeunes ? Les plus vieux ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#moyenne age\nmoy_ete <- olympics_athletes_tibble |> \n  filter(isSummer == \"TRUE\") |> \n  group_by(Year) |> \n  summarise(moy_age = mean(Age, na.rm = TRUE))\nprint(moy_ete)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 29 × 2\n    Year moy_age\n   <int>   <dbl>\n 1  1896    23.6\n 2  1900    28.9\n 3  1904    26.7\n 4  1906    27.1\n 5  1908    27.0\n 6  1912    27.5\n 7  1920    29.3\n 8  1924    28.1\n 9  1928    28.0\n10  1932    30.2\n# ℹ 19 more rows\n```\n:::\n\n```{.r .cell-code}\n#moyenne la plus faible\njeune <- moy_ete |> \n  filter(moy_age==min(moy_age, na.rm = TRUE))\nprint(jeune)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n   Year moy_age\n  <int>   <dbl>\n1  1896    23.6\n```\n:::\n\n```{.r .cell-code}\n#moyenne la plus haute\nvieux <- moy_ete |> \n  filter(moy_age==max(moy_age, na.rm = TRUE))\nprint(vieux)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n   Year moy_age\n  <int>   <dbl>\n1  1932    30.2\n```\n:::\n:::\n\n\nL'édition où les athlétes ont été en moyenne les plus jeunes était 1896. L'édition où les athlétes ont été en moyenne les plus vieux était 1932.\n\n## Question 11\n\n### Quelle est la discipline des JO d'été dont la taille des athlètes féminines est la plus grande ? Quelle a été cette discipline au cours de chacune des éditions ? Calculez le nombre de fois où chaque discipline a été la discipline avec les plus grandes athlètes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes_tibble |> \n  filter(isSummer == \"TRUE\", Sex == \"F\") |> \n  group_by(Sport) |> \n  summarise(max_taille = ifelse(all(is.na(Height)), NA, max(Height, na.rm = TRUE))) |> \n  arrange(desc(max_taille)) |> \n  slice(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  Sport      max_taille\n  <chr>           <int>\n1 Basketball        213\n```\n:::\n:::\n\n\nLa discipline des JO d'été dont la taille des athlètes féminines est la plus grande est le basketball.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes_tibble |>\n  filter(isSummer == \"TRUE\", Sex == \"F\") |>\n  group_by(Year, Sport) |>\n  summarise(max_taille = ifelse(all(is.na(Height)), NA, max(Height, na.rm = TRUE))) |>\n  arrange(Year, desc(max_taille)) |>\n  group_by(Year) |>\n  slice(1) |> \n  print(n=30)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'Year'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 28 × 3\n# Groups:   Year [28]\n    Year Sport      max_taille\n   <int> <chr>           <int>\n 1  1900 Croquet            NA\n 2  1904 Archery            NA\n 3  1906 Tennis             NA\n 4  1908 Archery            NA\n 5  1912 Diving             NA\n 6  1920 Diving            175\n 7  1924 Fencing           175\n 8  1928 Fencing           183\n 9  1932 Fencing           183\n10  1936 Fencing           183\n11  1948 Athletics         180\n12  1952 Athletics         188\n13  1956 Athletics         185\n14  1960 Swimming          186\n15  1964 Athletics         188\n16  1968 Athletics         188\n17  1972 Athletics         190\n18  1976 Basketball        210\n19  1980 Basketball        210\n20  1984 Basketball        205\n21  1988 Basketball        204\n22  1992 Basketball        204\n23  1996 Basketball        204\n24  2000 Basketball        213\n25  2004 Basketball        202\n26  2008 Basketball        202\n27  2012 Basketball        206\n28  2016 Basketball        203\n```\n:::\n:::\n\n\nSelon les années les disciplines avec la femme avec la plus grande taille a été : fencing, athletics, swimming et basketball.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- olympics_athletes_tibble |> \n  filter(isSummer == \"TRUE\", Sex == \"F\") |> \n  group_by(Year, Sport) |> \n  summarise(max_taille = ifelse(all(is.na(Height)), NA, max(Height, na.rm = TRUE))) |> \n  arrange(Year, desc(max_taille)) |> \n  group_by(Year) |> \n  slice(1) |> \n  ungroup() |> \n  count(Sport) |> \n  arrange(desc(n))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'Year'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 2\n  Sport          n\n  <chr>      <int>\n1 Basketball    11\n2 Athletics      6\n3 Fencing        4\n4 Archery        2\n5 Diving         2\n6 Croquet        1\n7 Swimming       1\n8 Tennis         1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntexte <- \"Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois de Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016, ceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du 26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde entier à Paris.\"\n```\n:::\n\n\n## Question 12\n\n### Extrayez les dates des différentes éditions des JO.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\nlibrary(lubridate)\ndates_str <- str_extract_all(texte, \"\\\\d{1,2} (Janvier|Février|Mars|Avril|Mai|Juin|Juillet|Août|Septembre|Octobre|Novembre|Décembre) \\\\d{4}\")\ndates_str <- dates_str[[1]]\n# Afficher les dates extraites\nprint(dates_str)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"5 Août 2016\"     \"20 Août 2016\"    \"23 Juillet 2021\" \"8 Août 2021\"    \n[5] \"26 Juillet 2024\" \"11 Août 2024\"   \n```\n:::\n:::\n\n\nLes différentes dates des éditions des JO sont : \"5 Août 2016\", \"20 Août 2016\", \"23 Juillet 2021\", \"8 Août 2021\", \"26 Juillet 2024\" et \"11 Août 2024\". \\## Question 13\n\n### Remplacez les noms des mois par leur numéro pour rendre ces éléments convertibles en date en utilisant la fonction str_replace.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndates_num <- str_replace_all(dates_str, c(\"Janvier\" = \"01\", \"Février\" = \"02\", \"Mars\" = \"03\", \"Avril\" = \"04\", \"Mai\" = \"05\", \"Juin\" = \"06\", \"Juillet\" = \"07\", \"Août\" = \"08\", \"Septembre\" = \"09\", \"Octobre\" = \"10\", \"Novembre\" = \"11\", \"Décembre\" = \"12\"))\n\n# Afficher les dates avec les mois en numéros\nprint(dates_num)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"5 08 2016\"  \"20 08 2016\" \"23 07 2021\" \"8 08 2021\"  \"26 07 2024\"\n[6] \"11 08 2024\"\n```\n:::\n:::\n\n\n## Question 14\n\n### Convertissez ces 3 éléments en date en utilisant la fonction appropriée du package lubridate.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndates <- dmy(dates_num)\n\n# Afficher les dates au format Date\nprint(dates)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2016-08-05\" \"2016-08-20\" \"2021-07-23\" \"2021-08-08\" \"2024-07-26\"\n[6] \"2024-08-11\"\n```\n:::\n:::\n\n\nLes dates converties sont : \"2016-08-05\", \"2016-08-20\", \"2021-07-23\", \"2021-08-08\", \"2024-07-26\" et \"2024-08-11\".\n\n## Question 15\n\n### Combien de jours ont séparés les éditions de Rio et Tokyo ? Et sépareront les éditions de Tokyo et de Paris ? Faites le même calcul en semaines.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calcul du nombre de jours entre Rio et Tokyo, et Tokyo et Paris\njours_entre_Rio_et_Tokyo <- as.numeric(difftime(dates[3], dates[2], units = \"days\"))\njours_entre_Tokyo_et_Paris <- as.numeric(difftime(dates[5], dates[4], units = \"days\"))\n\n# Calcul en semaines\nsemaines_entre_Rio_et_Tokyo <- jours_entre_Rio_et_Tokyo / 7\nsemaines_entre_Tokyo_et_Paris <- jours_entre_Tokyo_et_Paris / 7\n\n# Afficher les résultats\nprint(paste(\"Jours entre Rio et Tokyo:\", jours_entre_Rio_et_Tokyo))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Jours entre Rio et Tokyo: 1798\"\n```\n:::\n\n```{.r .cell-code}\nprint(paste(\"Semaines entre Rio et Tokyo:\", semaines_entre_Rio_et_Tokyo))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Semaines entre Rio et Tokyo: 256.857142857143\"\n```\n:::\n\n```{.r .cell-code}\nprint(paste(\"Jours entre Tokyo et Paris:\", jours_entre_Tokyo_et_Paris))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Jours entre Tokyo et Paris: 1083\"\n```\n:::\n\n```{.r .cell-code}\nprint(paste(\"Semaines entre Tokyo et Paris:\", semaines_entre_Tokyo_et_Paris))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Semaines entre Tokyo et Paris: 154.714285714286\"\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}